// Generated by GNU Bison 3.8.2.
// Report bugs to <bug-bison@gnu.org>.
// Home page: <https://www.gnu.org/software/bison/>.

digraph "parser.y"
{
  node [fontname = courier, shape = box, colorscheme = paired6]
  edge [fontname = courier]

  0 [label="State 0\n\l  0 $accept: • function $end\l"]
  0 -> 1 [style=dotted]
  0 -> 2 [style=solid label="FUNCTION"]
  0 -> 3 [style=dashed label="function"]
  0 -> 4 [style=dashed label="function_header"]
  1 [label="State 1\n\l  3 function_header: error • ';'\l"]
  1 -> 5 [style=solid label="';'"]
  2 [label="State 2\n\l  2 function_header: FUNCTION • IDENTIFIER parameters RETURNS type ';'\l"]
  2 -> 6 [style=solid label="IDENTIFIER"]
  3 [label="State 3\n\l  0 $accept: function • $end\l"]
  3 -> 7 [style=solid label="$end"]
  4 [label="State 4\n\l  1 function: function_header • optional_variable body\l"]
  4 -> 8 [style=dotted]
  4 -> 9 [style=solid label="IDENTIFIER"]
  4 -> 10 [style=dashed label="optional_variable"]
  4 -> 11 [style=dashed label="variable"]
  4 -> "4R10" [label="[BEGIN_]", style=solid]
 "4R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  5 [label="State 5\n\l  3 function_header: error ';' •\l"]
  5 -> "5R3" [style=solid]
 "5R3" [label="R3", fillcolor=3, shape=diamond, style=filled]
  6 [label="State 6\n\l  2 function_header: FUNCTION IDENTIFIER • parameters RETURNS type ';'\l"]
  6 -> 12 [style=solid label="IDENTIFIER"]
  6 -> 13 [style=dashed label="parameters"]
  6 -> 14 [style=dashed label="parameter"]
  6 -> "6R6" [style=solid]
 "6R6" [label="R6", fillcolor=3, shape=diamond, style=filled]
  7 [label="State 7\n\l  0 $accept: function $end •\l"]
  7 -> "7R0" [style=solid]
 "7R0" [label="Acc", fillcolor=1, shape=diamond, style=filled]
  8 [label="State 8\n\l  9 optional_variable: error • ';'\l"]
  8 -> 15 [style=solid label="';'"]
  9 [label="State 9\n\l 14 variable: IDENTIFIER • ':' type IS statement\l 15         | IDENTIFIER • ':' LIST OF type IS list ';'\l"]
  9 -> 16 [style=solid label="':'"]
  10 [label="State 10\n\l  1 function: function_header optional_variable • body\l"]
  10 -> 17 [style=solid label="BEGIN_"]
  10 -> 18 [style=dashed label="body"]
  11 [label="State 11\n\l  8 optional_variable: variable • optional_variable\l"]
  11 -> 8 [style=dotted]
  11 -> 9 [style=solid label="IDENTIFIER"]
  11 -> 19 [style=dashed label="optional_variable"]
  11 -> 11 [style=dashed label="variable"]
  11 -> "11R10" [label="[BEGIN_]", style=solid]
 "11R10" [label="R10", fillcolor=3, shape=diamond, style=filled]
  12 [label="State 12\n\l  7 parameter: IDENTIFIER • ':' type\l"]
  12 -> 20 [style=solid label="':'"]
  13 [label="State 13\n\l  2 function_header: FUNCTION IDENTIFIER parameters • RETURNS type ';'\l  4 parameters: parameters • ',' parameter\l"]
  13 -> 21 [style=solid label="RETURNS"]
  13 -> 22 [style=solid label="','"]
  14 [label="State 14\n\l  5 parameters: parameter •\l"]
  14 -> "14R5" [style=solid]
 "14R5" [label="R5", fillcolor=3, shape=diamond, style=filled]
  15 [label="State 15\n\l  9 optional_variable: error ';' •\l"]
  15 -> "15R9" [style=solid]
 "15R9" [label="R9", fillcolor=3, shape=diamond, style=filled]
  16 [label="State 16\n\l 14 variable: IDENTIFIER ':' • type IS statement\l 15         | IDENTIFIER ':' • LIST OF type IS list ';'\l"]
  16 -> 23 [style=solid label="LIST"]
  16 -> 24 [style=solid label="CHARACTER"]
  16 -> 25 [style=solid label="REAL"]
  16 -> 26 [style=solid label="INTEGER"]
  16 -> 27 [style=dashed label="type"]
  17 [label="State 17\n\l 19 body: BEGIN_ • statement_ END ';'\l"]
  17 -> 28 [style=dotted]
  17 -> 29 [style=solid label="INT_LITERAL"]
  17 -> 30 [style=solid label="REAL_LITERAL"]
  17 -> 31 [style=solid label="HEX_LITERAL"]
  17 -> 32 [style=solid label="CHAR_LITERAL"]
  17 -> 33 [style=solid label="NEGOP"]
  17 -> 34 [style=solid label="IDENTIFIER"]
  17 -> 35 [style=solid label="NOTOP"]
  17 -> 36 [style=solid label="WHEN"]
  17 -> 37 [style=solid label="SWITCH"]
  17 -> 38 [style=solid label="IF"]
  17 -> 39 [style=solid label="FOLD"]
  17 -> 40 [style=solid label="'('"]
  17 -> 41 [style=dashed label="statement_"]
  17 -> 42 [style=dashed label="statement"]
  17 -> 43 [style=dashed label="SWITCH_descent"]
  17 -> 44 [style=dashed label="IF_descent"]
  17 -> 45 [style=dashed label="expression"]
  17 -> 46 [style=dashed label="term"]
  17 -> 47 [style=dashed label="primary"]
  18 [label="State 18\n\l  1 function: function_header optional_variable body •\l"]
  18 -> "18R1" [style=solid]
 "18R1" [label="R1", fillcolor=3, shape=diamond, style=filled]
  19 [label="State 19\n\l  8 optional_variable: variable optional_variable •\l"]
  19 -> "19R8" [style=solid]
 "19R8" [label="R8", fillcolor=3, shape=diamond, style=filled]
  20 [label="State 20\n\l  7 parameter: IDENTIFIER ':' • type\l"]
  20 -> 24 [style=solid label="CHARACTER"]
  20 -> 25 [style=solid label="REAL"]
  20 -> 26 [style=solid label="INTEGER"]
  20 -> 48 [style=dashed label="type"]
  21 [label="State 21\n\l  2 function_header: FUNCTION IDENTIFIER parameters RETURNS • type ';'\l"]
  21 -> 24 [style=solid label="CHARACTER"]
  21 -> 25 [style=solid label="REAL"]
  21 -> 26 [style=solid label="INTEGER"]
  21 -> 49 [style=dashed label="type"]
  22 [label="State 22\n\l  4 parameters: parameters ',' • parameter\l"]
  22 -> 12 [style=solid label="IDENTIFIER"]
  22 -> 50 [style=dashed label="parameter"]
  23 [label="State 23\n\l 15 variable: IDENTIFIER ':' LIST • OF type IS list ';'\l"]
  23 -> 51 [style=solid label="OF"]
  24 [label="State 24\n\l 12 type: CHARACTER •\l"]
  24 -> "24R12" [style=solid]
 "24R12" [label="R12", fillcolor=3, shape=diamond, style=filled]
  25 [label="State 25\n\l 13 type: REAL •\l"]
  25 -> "25R13" [style=solid]
 "25R13" [label="R13", fillcolor=3, shape=diamond, style=filled]
  26 [label="State 26\n\l 11 type: INTEGER •\l"]
  26 -> "26R11" [style=solid]
 "26R11" [label="R11", fillcolor=3, shape=diamond, style=filled]
  27 [label="State 27\n\l 14 variable: IDENTIFIER ':' type • IS statement\l"]
  27 -> 52 [style=solid label="IS"]
  28 [label="State 28\n\l 21 statement_: error • ';'\l"]
  28 -> 53 [style=solid label="';'"]
  29 [label="State 29\n\l 60 primary: INT_LITERAL •\l"]
  29 -> "29R60" [style=solid]
 "29R60" [label="R60", fillcolor=3, shape=diamond, style=filled]
  30 [label="State 30\n\l 62 primary: REAL_LITERAL •\l"]
  30 -> "30R62" [style=solid]
 "30R62" [label="R62", fillcolor=3, shape=diamond, style=filled]
  31 [label="State 31\n\l 63 primary: HEX_LITERAL •\l"]
  31 -> "31R63" [style=solid]
 "31R63" [label="R63", fillcolor=3, shape=diamond, style=filled]
  32 [label="State 32\n\l 61 primary: CHAR_LITERAL •\l"]
  32 -> "32R61" [style=solid]
 "32R61" [label="R61", fillcolor=3, shape=diamond, style=filled]
  33 [label="State 33\n\l 58 primary: NEGOP • term\l"]
  33 -> 29 [style=solid label="INT_LITERAL"]
  33 -> 30 [style=solid label="REAL_LITERAL"]
  33 -> 31 [style=solid label="HEX_LITERAL"]
  33 -> 32 [style=solid label="CHAR_LITERAL"]
  33 -> 33 [style=solid label="NEGOP"]
  33 -> 34 [style=solid label="IDENTIFIER"]
  33 -> 35 [style=solid label="NOTOP"]
  33 -> 40 [style=solid label="'('"]
  33 -> 54 [style=dashed label="term"]
  33 -> 47 [style=dashed label="primary"]
  34 [label="State 34\n\l 64 primary: IDENTIFIER • '(' expression ')'\l 65        | IDENTIFIER •\l"]
  34 -> 55 [style=solid label="'('"]
  34 -> "34R65" [style=solid]
 "34R65" [label="R65", fillcolor=3, shape=diamond, style=filled]
  35 [label="State 35\n\l 59 primary: NOTOP • term\l"]
  35 -> 29 [style=solid label="INT_LITERAL"]
  35 -> 30 [style=solid label="REAL_LITERAL"]
  35 -> 31 [style=solid label="HEX_LITERAL"]
  35 -> 32 [style=solid label="CHAR_LITERAL"]
  35 -> 33 [style=solid label="NEGOP"]
  35 -> 34 [style=solid label="IDENTIFIER"]
  35 -> 35 [style=solid label="NOTOP"]
  35 -> 40 [style=solid label="'('"]
  35 -> 56 [style=dashed label="term"]
  35 -> 47 [style=dashed label="primary"]
  36 [label="State 36\n\l 23 statement: WHEN • condition_list ',' expression ':' expression\l 24          | WHEN • error\l"]
  36 -> 57 [style=dotted]
  36 -> 29 [style=solid label="INT_LITERAL"]
  36 -> 30 [style=solid label="REAL_LITERAL"]
  36 -> 31 [style=solid label="HEX_LITERAL"]
  36 -> 32 [style=solid label="CHAR_LITERAL"]
  36 -> 33 [style=solid label="NEGOP"]
  36 -> 34 [style=solid label="IDENTIFIER"]
  36 -> 58 [style=solid label="NOTOP"]
  36 -> 59 [style=solid label="'('"]
  36 -> 60 [style=dashed label="condition_list"]
  36 -> 61 [style=dashed label="condition"]
  36 -> 62 [style=dashed label="relation"]
  36 -> 63 [style=dashed label="expression"]
  36 -> 46 [style=dashed label="term"]
  36 -> 47 [style=dashed label="primary"]
  37 [label="State 37\n\l 28 SWITCH_descent: SWITCH • expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l 29               | SWITCH • expression IS error ENDSWITCH ';'\l"]
  37 -> 29 [style=solid label="INT_LITERAL"]
  37 -> 30 [style=solid label="REAL_LITERAL"]
  37 -> 31 [style=solid label="HEX_LITERAL"]
  37 -> 32 [style=solid label="CHAR_LITERAL"]
  37 -> 33 [style=solid label="NEGOP"]
  37 -> 34 [style=solid label="IDENTIFIER"]
  37 -> 35 [style=solid label="NOTOP"]
  37 -> 40 [style=solid label="'('"]
  37 -> 64 [style=dashed label="expression"]
  37 -> 46 [style=dashed label="term"]
  37 -> 47 [style=dashed label="primary"]
  38 [label="State 38\n\l 30 IF_descent: IF • condition_list THEN statement ELSIF_descent ELSE statement ENDIF ';'\l"]
  38 -> 29 [style=solid label="INT_LITERAL"]
  38 -> 30 [style=solid label="REAL_LITERAL"]
  38 -> 31 [style=solid label="HEX_LITERAL"]
  38 -> 32 [style=solid label="CHAR_LITERAL"]
  38 -> 33 [style=solid label="NEGOP"]
  38 -> 34 [style=solid label="IDENTIFIER"]
  38 -> 58 [style=solid label="NOTOP"]
  38 -> 59 [style=solid label="'('"]
  38 -> 65 [style=dashed label="condition_list"]
  38 -> 61 [style=dashed label="condition"]
  38 -> 62 [style=dashed label="relation"]
  38 -> 63 [style=dashed label="expression"]
  38 -> 46 [style=dashed label="term"]
  38 -> 47 [style=dashed label="primary"]
  39 [label="State 39\n\l 27 statement: FOLD • direction operator list ENDFOLD\l"]
  39 -> 66 [style=solid label="LEFT"]
  39 -> 67 [style=solid label="RIGHT"]
  39 -> 68 [style=dashed label="direction"]
  40 [label="State 40\n\l 57 primary: '(' • expression ')'\l"]
  40 -> 29 [style=solid label="INT_LITERAL"]
  40 -> 30 [style=solid label="REAL_LITERAL"]
  40 -> 31 [style=solid label="HEX_LITERAL"]
  40 -> 32 [style=solid label="CHAR_LITERAL"]
  40 -> 33 [style=solid label="NEGOP"]
  40 -> 34 [style=solid label="IDENTIFIER"]
  40 -> 35 [style=solid label="NOTOP"]
  40 -> 40 [style=solid label="'('"]
  40 -> 69 [style=dashed label="expression"]
  40 -> 46 [style=dashed label="term"]
  40 -> 47 [style=dashed label="primary"]
  41 [label="State 41\n\l 19 body: BEGIN_ statement_ • END ';'\l"]
  41 -> 70 [style=solid label="END"]
  42 [label="State 42\n\l 20 statement_: statement •\l"]
  42 -> "42R20" [style=solid]
 "42R20" [label="R20", fillcolor=3, shape=diamond, style=filled]
  43 [label="State 43\n\l 25 statement: SWITCH_descent •\l"]
  43 -> "43R25" [style=solid]
 "43R25" [label="R25", fillcolor=3, shape=diamond, style=filled]
  44 [label="State 44\n\l 26 statement: IF_descent •\l"]
  44 -> "44R26" [style=solid]
 "44R26" [label="R26", fillcolor=3, shape=diamond, style=filled]
  45 [label="State 45\n\l 22 statement: expression • ';'\l 50 expression: expression • ADDOP term\l"]
  45 -> 71 [style=solid label="ADDOP"]
  45 -> 72 [style=solid label="';'"]
  46 [label="State 46\n\l 51 expression: term •\l 52 term: term • MULOP primary\l 53     | term • MODOP primary\l 54     | term • EXPOP primary\l 55     | term • RELOP primary\l"]
  46 -> 73 [style=solid label="RELOP"]
  46 -> 74 [style=solid label="MULOP"]
  46 -> 75 [style=solid label="MODOP"]
  46 -> 76 [style=solid label="EXPOP"]
  46 -> "46R51d" [label="[RELOP]", style=solid]
 "46R51d" [label="R51", fillcolor=5, shape=diamond, style=filled]
  46 -> "46R51" [style=solid]
 "46R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  47 [label="State 47\n\l 56 term: primary •\l"]
  47 -> "47R56" [style=solid]
 "47R56" [label="R56", fillcolor=3, shape=diamond, style=filled]
  48 [label="State 48\n\l  7 parameter: IDENTIFIER ':' type •\l"]
  48 -> "48R7" [style=solid]
 "48R7" [label="R7", fillcolor=3, shape=diamond, style=filled]
  49 [label="State 49\n\l  2 function_header: FUNCTION IDENTIFIER parameters RETURNS type • ';'\l"]
  49 -> 77 [style=solid label="';'"]
  50 [label="State 50\n\l  4 parameters: parameters ',' parameter •\l"]
  50 -> "50R4" [style=solid]
 "50R4" [label="R4", fillcolor=3, shape=diamond, style=filled]
  51 [label="State 51\n\l 15 variable: IDENTIFIER ':' LIST OF • type IS list ';'\l"]
  51 -> 24 [style=solid label="CHARACTER"]
  51 -> 25 [style=solid label="REAL"]
  51 -> 26 [style=solid label="INTEGER"]
  51 -> 78 [style=dashed label="type"]
  52 [label="State 52\n\l 14 variable: IDENTIFIER ':' type IS • statement\l"]
  52 -> 29 [style=solid label="INT_LITERAL"]
  52 -> 30 [style=solid label="REAL_LITERAL"]
  52 -> 31 [style=solid label="HEX_LITERAL"]
  52 -> 32 [style=solid label="CHAR_LITERAL"]
  52 -> 33 [style=solid label="NEGOP"]
  52 -> 34 [style=solid label="IDENTIFIER"]
  52 -> 35 [style=solid label="NOTOP"]
  52 -> 36 [style=solid label="WHEN"]
  52 -> 37 [style=solid label="SWITCH"]
  52 -> 38 [style=solid label="IF"]
  52 -> 39 [style=solid label="FOLD"]
  52 -> 40 [style=solid label="'('"]
  52 -> 79 [style=dashed label="statement"]
  52 -> 43 [style=dashed label="SWITCH_descent"]
  52 -> 44 [style=dashed label="IF_descent"]
  52 -> 45 [style=dashed label="expression"]
  52 -> 46 [style=dashed label="term"]
  52 -> 47 [style=dashed label="primary"]
  53 [label="State 53\n\l 21 statement_: error ';' •\l"]
  53 -> "53R21" [style=solid]
 "53R21" [label="R21", fillcolor=3, shape=diamond, style=filled]
  54 [label="State 54\n\l 52 term: term • MULOP primary\l 53     | term • MODOP primary\l 54     | term • EXPOP primary\l 55     | term • RELOP primary\l 58 primary: NEGOP term •\l"]
  54 -> 73 [style=solid label="RELOP"]
  54 -> 74 [style=solid label="MULOP"]
  54 -> 75 [style=solid label="MODOP"]
  54 -> 76 [style=solid label="EXPOP"]
  54 -> "54R58d" [label="[RELOP, MULOP, MODOP, EXPOP]", style=solid]
 "54R58d" [label="R58", fillcolor=5, shape=diamond, style=filled]
  54 -> "54R58" [style=solid]
 "54R58" [label="R58", fillcolor=3, shape=diamond, style=filled]
  55 [label="State 55\n\l 64 primary: IDENTIFIER '(' • expression ')'\l"]
  55 -> 29 [style=solid label="INT_LITERAL"]
  55 -> 30 [style=solid label="REAL_LITERAL"]
  55 -> 31 [style=solid label="HEX_LITERAL"]
  55 -> 32 [style=solid label="CHAR_LITERAL"]
  55 -> 33 [style=solid label="NEGOP"]
  55 -> 34 [style=solid label="IDENTIFIER"]
  55 -> 35 [style=solid label="NOTOP"]
  55 -> 40 [style=solid label="'('"]
  55 -> 80 [style=dashed label="expression"]
  55 -> 46 [style=dashed label="term"]
  55 -> 47 [style=dashed label="primary"]
  56 [label="State 56\n\l 52 term: term • MULOP primary\l 53     | term • MODOP primary\l 54     | term • EXPOP primary\l 55     | term • RELOP primary\l 59 primary: NOTOP term •\l"]
  56 -> 73 [style=solid label="RELOP"]
  56 -> 74 [style=solid label="MULOP"]
  56 -> 75 [style=solid label="MODOP"]
  56 -> 76 [style=solid label="EXPOP"]
  56 -> "56R59d" [label="[RELOP, MULOP, MODOP, EXPOP]", style=solid]
 "56R59d" [label="R59", fillcolor=5, shape=diamond, style=filled]
  56 -> "56R59" [style=solid]
 "56R59" [label="R59", fillcolor=3, shape=diamond, style=filled]
  57 [label="State 57\n\l 24 statement: WHEN error •\l"]
  57 -> "57R24" [style=solid]
 "57R24" [label="R24", fillcolor=3, shape=diamond, style=filled]
  58 [label="State 58\n\l 45 condition: NOTOP • relation\l 59 primary: NOTOP • term\l"]
  58 -> 29 [style=solid label="INT_LITERAL"]
  58 -> 30 [style=solid label="REAL_LITERAL"]
  58 -> 31 [style=solid label="HEX_LITERAL"]
  58 -> 32 [style=solid label="CHAR_LITERAL"]
  58 -> 33 [style=solid label="NEGOP"]
  58 -> 34 [style=solid label="IDENTIFIER"]
  58 -> 35 [style=solid label="NOTOP"]
  58 -> 59 [style=solid label="'('"]
  58 -> 81 [style=dashed label="relation"]
  58 -> 63 [style=dashed label="expression"]
  58 -> 82 [style=dashed label="term"]
  58 -> 47 [style=dashed label="primary"]
  59 [label="State 59\n\l 47 relation: '(' • condition ')'\l 57 primary: '(' • expression ')'\l"]
  59 -> 29 [style=solid label="INT_LITERAL"]
  59 -> 30 [style=solid label="REAL_LITERAL"]
  59 -> 31 [style=solid label="HEX_LITERAL"]
  59 -> 32 [style=solid label="CHAR_LITERAL"]
  59 -> 33 [style=solid label="NEGOP"]
  59 -> 34 [style=solid label="IDENTIFIER"]
  59 -> 58 [style=solid label="NOTOP"]
  59 -> 59 [style=solid label="'('"]
  59 -> 83 [style=dashed label="condition"]
  59 -> 62 [style=dashed label="relation"]
  59 -> 84 [style=dashed label="expression"]
  59 -> 46 [style=dashed label="term"]
  59 -> 47 [style=dashed label="primary"]
  60 [label="State 60\n\l 23 statement: WHEN condition_list • ',' expression ':' expression\l 42 condition_list: condition_list • ANDOP condition\l 43               | condition_list • OROP condition\l"]
  60 -> 85 [style=solid label="ANDOP"]
  60 -> 86 [style=solid label="OROP"]
  60 -> 87 [style=solid label="','"]
  61 [label="State 61\n\l 44 condition_list: condition •\l"]
  61 -> "61R44" [style=solid]
 "61R44" [label="R44", fillcolor=3, shape=diamond, style=filled]
  62 [label="State 62\n\l 46 condition: relation •\l"]
  62 -> "62R46" [style=solid]
 "62R46" [label="R46", fillcolor=3, shape=diamond, style=filled]
  63 [label="State 63\n\l 48 relation: expression • RELOP expression\l 49         | expression •\l 50 expression: expression • ADDOP term\l"]
  63 -> 88 [style=solid label="RELOP"]
  63 -> 71 [style=solid label="ADDOP"]
  63 -> "63R49" [style=solid]
 "63R49" [label="R49", fillcolor=3, shape=diamond, style=filled]
  64 [label="State 64\n\l 28 SWITCH_descent: SWITCH expression • IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l 29               | SWITCH expression • IS error ENDSWITCH ';'\l 50 expression: expression • ADDOP term\l"]
  64 -> 71 [style=solid label="ADDOP"]
  64 -> 89 [style=solid label="IS"]
  65 [label="State 65\n\l 30 IF_descent: IF condition_list • THEN statement ELSIF_descent ELSE statement ENDIF ';'\l 42 condition_list: condition_list • ANDOP condition\l 43               | condition_list • OROP condition\l"]
  65 -> 85 [style=solid label="ANDOP"]
  65 -> 86 [style=solid label="OROP"]
  65 -> 90 [style=solid label="THEN"]
  66 [label="State 66\n\l 34 direction: LEFT •\l"]
  66 -> "66R34" [style=solid]
 "66R34" [label="R34", fillcolor=3, shape=diamond, style=filled]
  67 [label="State 67\n\l 35 direction: RIGHT •\l"]
  67 -> "67R35" [style=solid]
 "67R35" [label="R35", fillcolor=3, shape=diamond, style=filled]
  68 [label="State 68\n\l 27 statement: FOLD direction • operator list ENDFOLD\l"]
  68 -> 91 [style=solid label="ADDOP"]
  68 -> 92 [style=solid label="MULOP"]
  68 -> 93 [style=dashed label="operator"]
  69 [label="State 69\n\l 50 expression: expression • ADDOP term\l 57 primary: '(' expression • ')'\l"]
  69 -> 71 [style=solid label="ADDOP"]
  69 -> 94 [style=solid label="')'"]
  70 [label="State 70\n\l 19 body: BEGIN_ statement_ END • ';'\l"]
  70 -> 95 [style=solid label="';'"]
  71 [label="State 71\n\l 50 expression: expression ADDOP • term\l"]
  71 -> 29 [style=solid label="INT_LITERAL"]
  71 -> 30 [style=solid label="REAL_LITERAL"]
  71 -> 31 [style=solid label="HEX_LITERAL"]
  71 -> 32 [style=solid label="CHAR_LITERAL"]
  71 -> 33 [style=solid label="NEGOP"]
  71 -> 34 [style=solid label="IDENTIFIER"]
  71 -> 35 [style=solid label="NOTOP"]
  71 -> 40 [style=solid label="'('"]
  71 -> 96 [style=dashed label="term"]
  71 -> 47 [style=dashed label="primary"]
  72 [label="State 72\n\l 22 statement: expression ';' •\l"]
  72 -> "72R22" [style=solid]
 "72R22" [label="R22", fillcolor=3, shape=diamond, style=filled]
  73 [label="State 73\n\l 55 term: term RELOP • primary\l"]
  73 -> 29 [style=solid label="INT_LITERAL"]
  73 -> 30 [style=solid label="REAL_LITERAL"]
  73 -> 31 [style=solid label="HEX_LITERAL"]
  73 -> 32 [style=solid label="CHAR_LITERAL"]
  73 -> 33 [style=solid label="NEGOP"]
  73 -> 34 [style=solid label="IDENTIFIER"]
  73 -> 35 [style=solid label="NOTOP"]
  73 -> 40 [style=solid label="'('"]
  73 -> 97 [style=dashed label="primary"]
  74 [label="State 74\n\l 52 term: term MULOP • primary\l"]
  74 -> 29 [style=solid label="INT_LITERAL"]
  74 -> 30 [style=solid label="REAL_LITERAL"]
  74 -> 31 [style=solid label="HEX_LITERAL"]
  74 -> 32 [style=solid label="CHAR_LITERAL"]
  74 -> 33 [style=solid label="NEGOP"]
  74 -> 34 [style=solid label="IDENTIFIER"]
  74 -> 35 [style=solid label="NOTOP"]
  74 -> 40 [style=solid label="'('"]
  74 -> 98 [style=dashed label="primary"]
  75 [label="State 75\n\l 53 term: term MODOP • primary\l"]
  75 -> 29 [style=solid label="INT_LITERAL"]
  75 -> 30 [style=solid label="REAL_LITERAL"]
  75 -> 31 [style=solid label="HEX_LITERAL"]
  75 -> 32 [style=solid label="CHAR_LITERAL"]
  75 -> 33 [style=solid label="NEGOP"]
  75 -> 34 [style=solid label="IDENTIFIER"]
  75 -> 35 [style=solid label="NOTOP"]
  75 -> 40 [style=solid label="'('"]
  75 -> 99 [style=dashed label="primary"]
  76 [label="State 76\n\l 54 term: term EXPOP • primary\l"]
  76 -> 29 [style=solid label="INT_LITERAL"]
  76 -> 30 [style=solid label="REAL_LITERAL"]
  76 -> 31 [style=solid label="HEX_LITERAL"]
  76 -> 32 [style=solid label="CHAR_LITERAL"]
  76 -> 33 [style=solid label="NEGOP"]
  76 -> 34 [style=solid label="IDENTIFIER"]
  76 -> 35 [style=solid label="NOTOP"]
  76 -> 40 [style=solid label="'('"]
  76 -> 100 [style=dashed label="primary"]
  77 [label="State 77\n\l  2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' •\l"]
  77 -> "77R2" [style=solid]
 "77R2" [label="R2", fillcolor=3, shape=diamond, style=filled]
  78 [label="State 78\n\l 15 variable: IDENTIFIER ':' LIST OF type • IS list ';'\l"]
  78 -> 101 [style=solid label="IS"]
  79 [label="State 79\n\l 14 variable: IDENTIFIER ':' type IS statement •\l"]
  79 -> "79R14" [style=solid]
 "79R14" [label="R14", fillcolor=3, shape=diamond, style=filled]
  80 [label="State 80\n\l 50 expression: expression • ADDOP term\l 64 primary: IDENTIFIER '(' expression • ')'\l"]
  80 -> 71 [style=solid label="ADDOP"]
  80 -> 102 [style=solid label="')'"]
  81 [label="State 81\n\l 45 condition: NOTOP relation •\l"]
  81 -> "81R45" [style=solid]
 "81R45" [label="R45", fillcolor=3, shape=diamond, style=filled]
  82 [label="State 82\n\l 51 expression: term •\l 52 term: term • MULOP primary\l 53     | term • MODOP primary\l 54     | term • EXPOP primary\l 55     | term • RELOP primary\l 59 primary: NOTOP term •\l"]
  82 -> 73 [style=solid label="RELOP"]
  82 -> 74 [style=solid label="MULOP"]
  82 -> 75 [style=solid label="MODOP"]
  82 -> 76 [style=solid label="EXPOP"]
  82 -> "82R51d" [label="[RELOP]", style=solid]
 "82R51d" [label="R51", fillcolor=5, shape=diamond, style=filled]
  82 -> "82R51" [style=solid]
 "82R51" [label="R51", fillcolor=3, shape=diamond, style=filled]
  82 -> "82R59d" [label="[RELOP, ADDOP, ANDOP, MULOP, MODOP, EXPOP, OROP, THEN, ',', ')']", style=solid]
 "82R59d" [label="R59", fillcolor=5, shape=diamond, style=filled]
  83 [label="State 83\n\l 47 relation: '(' condition • ')'\l"]
  83 -> 103 [style=solid label="')'"]
  84 [label="State 84\n\l 48 relation: expression • RELOP expression\l 49         | expression •\l 50 expression: expression • ADDOP term\l 57 primary: '(' expression • ')'\l"]
  84 -> 88 [style=solid label="RELOP"]
  84 -> 71 [style=solid label="ADDOP"]
  84 -> 94 [style=solid label="')'"]
  84 -> "84R49d" [label="[')']", style=solid]
 "84R49d" [label="R49", fillcolor=5, shape=diamond, style=filled]
  85 [label="State 85\n\l 42 condition_list: condition_list ANDOP • condition\l"]
  85 -> 29 [style=solid label="INT_LITERAL"]
  85 -> 30 [style=solid label="REAL_LITERAL"]
  85 -> 31 [style=solid label="HEX_LITERAL"]
  85 -> 32 [style=solid label="CHAR_LITERAL"]
  85 -> 33 [style=solid label="NEGOP"]
  85 -> 34 [style=solid label="IDENTIFIER"]
  85 -> 58 [style=solid label="NOTOP"]
  85 -> 59 [style=solid label="'('"]
  85 -> 104 [style=dashed label="condition"]
  85 -> 62 [style=dashed label="relation"]
  85 -> 63 [style=dashed label="expression"]
  85 -> 46 [style=dashed label="term"]
  85 -> 47 [style=dashed label="primary"]
  86 [label="State 86\n\l 43 condition_list: condition_list OROP • condition\l"]
  86 -> 29 [style=solid label="INT_LITERAL"]
  86 -> 30 [style=solid label="REAL_LITERAL"]
  86 -> 31 [style=solid label="HEX_LITERAL"]
  86 -> 32 [style=solid label="CHAR_LITERAL"]
  86 -> 33 [style=solid label="NEGOP"]
  86 -> 34 [style=solid label="IDENTIFIER"]
  86 -> 58 [style=solid label="NOTOP"]
  86 -> 59 [style=solid label="'('"]
  86 -> 105 [style=dashed label="condition"]
  86 -> 62 [style=dashed label="relation"]
  86 -> 63 [style=dashed label="expression"]
  86 -> 46 [style=dashed label="term"]
  86 -> 47 [style=dashed label="primary"]
  87 [label="State 87\n\l 23 statement: WHEN condition_list ',' • expression ':' expression\l"]
  87 -> 29 [style=solid label="INT_LITERAL"]
  87 -> 30 [style=solid label="REAL_LITERAL"]
  87 -> 31 [style=solid label="HEX_LITERAL"]
  87 -> 32 [style=solid label="CHAR_LITERAL"]
  87 -> 33 [style=solid label="NEGOP"]
  87 -> 34 [style=solid label="IDENTIFIER"]
  87 -> 35 [style=solid label="NOTOP"]
  87 -> 40 [style=solid label="'('"]
  87 -> 106 [style=dashed label="expression"]
  87 -> 46 [style=dashed label="term"]
  87 -> 47 [style=dashed label="primary"]
  88 [label="State 88\n\l 48 relation: expression RELOP • expression\l"]
  88 -> 29 [style=solid label="INT_LITERAL"]
  88 -> 30 [style=solid label="REAL_LITERAL"]
  88 -> 31 [style=solid label="HEX_LITERAL"]
  88 -> 32 [style=solid label="CHAR_LITERAL"]
  88 -> 33 [style=solid label="NEGOP"]
  88 -> 34 [style=solid label="IDENTIFIER"]
  88 -> 35 [style=solid label="NOTOP"]
  88 -> 40 [style=solid label="'('"]
  88 -> 107 [style=dashed label="expression"]
  88 -> 46 [style=dashed label="term"]
  88 -> 47 [style=dashed label="primary"]
  89 [label="State 89\n\l 28 SWITCH_descent: SWITCH expression IS • cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l 29               | SWITCH expression IS • error ENDSWITCH ';'\l"]
  89 -> 108 [style=dotted]
  89 -> 109 [style=solid label="CASE"]
  89 -> 110 [style=dashed label="case"]
  89 -> 111 [style=dashed label="cases"]
  90 [label="State 90\n\l 30 IF_descent: IF condition_list THEN • statement ELSIF_descent ELSE statement ENDIF ';'\l"]
  90 -> 29 [style=solid label="INT_LITERAL"]
  90 -> 30 [style=solid label="REAL_LITERAL"]
  90 -> 31 [style=solid label="HEX_LITERAL"]
  90 -> 32 [style=solid label="CHAR_LITERAL"]
  90 -> 33 [style=solid label="NEGOP"]
  90 -> 34 [style=solid label="IDENTIFIER"]
  90 -> 35 [style=solid label="NOTOP"]
  90 -> 36 [style=solid label="WHEN"]
  90 -> 37 [style=solid label="SWITCH"]
  90 -> 38 [style=solid label="IF"]
  90 -> 39 [style=solid label="FOLD"]
  90 -> 40 [style=solid label="'('"]
  90 -> 112 [style=dashed label="statement"]
  90 -> 43 [style=dashed label="SWITCH_descent"]
  90 -> 44 [style=dashed label="IF_descent"]
  90 -> 45 [style=dashed label="expression"]
  90 -> 46 [style=dashed label="term"]
  90 -> 47 [style=dashed label="primary"]
  91 [label="State 91\n\l 36 operator: ADDOP •\l"]
  91 -> "91R36" [style=solid]
 "91R36" [label="R36", fillcolor=3, shape=diamond, style=filled]
  92 [label="State 92\n\l 37 operator: MULOP •\l"]
  92 -> "92R37" [style=solid]
 "92R37" [label="R37", fillcolor=3, shape=diamond, style=filled]
  93 [label="State 93\n\l 27 statement: FOLD direction operator • list ENDFOLD\l"]
  93 -> 113 [style=solid label="'('"]
  93 -> 114 [style=dashed label="list"]
  94 [label="State 94\n\l 57 primary: '(' expression ')' •\l"]
  94 -> "94R57" [style=solid]
 "94R57" [label="R57", fillcolor=3, shape=diamond, style=filled]
  95 [label="State 95\n\l 19 body: BEGIN_ statement_ END ';' •\l"]
  95 -> "95R19" [style=solid]
 "95R19" [label="R19", fillcolor=3, shape=diamond, style=filled]
  96 [label="State 96\n\l 50 expression: expression ADDOP term •\l 52 term: term • MULOP primary\l 53     | term • MODOP primary\l 54     | term • EXPOP primary\l 55     | term • RELOP primary\l"]
  96 -> 73 [style=solid label="RELOP"]
  96 -> 74 [style=solid label="MULOP"]
  96 -> 75 [style=solid label="MODOP"]
  96 -> 76 [style=solid label="EXPOP"]
  96 -> "96R50d" [label="[RELOP]", style=solid]
 "96R50d" [label="R50", fillcolor=5, shape=diamond, style=filled]
  96 -> "96R50" [style=solid]
 "96R50" [label="R50", fillcolor=3, shape=diamond, style=filled]
  97 [label="State 97\n\l 55 term: term RELOP primary •\l"]
  97 -> "97R55" [style=solid]
 "97R55" [label="R55", fillcolor=3, shape=diamond, style=filled]
  98 [label="State 98\n\l 52 term: term MULOP primary •\l"]
  98 -> "98R52" [style=solid]
 "98R52" [label="R52", fillcolor=3, shape=diamond, style=filled]
  99 [label="State 99\n\l 53 term: term MODOP primary •\l"]
  99 -> "99R53" [style=solid]
 "99R53" [label="R53", fillcolor=3, shape=diamond, style=filled]
  100 [label="State 100\n\l 54 term: term EXPOP primary •\l"]
  100 -> "100R54" [style=solid]
 "100R54" [label="R54", fillcolor=3, shape=diamond, style=filled]
  101 [label="State 101\n\l 15 variable: IDENTIFIER ':' LIST OF type IS • list ';'\l"]
  101 -> 113 [style=solid label="'('"]
  101 -> 115 [style=dashed label="list"]
  102 [label="State 102\n\l 64 primary: IDENTIFIER '(' expression ')' •\l"]
  102 -> "102R64" [style=solid]
 "102R64" [label="R64", fillcolor=3, shape=diamond, style=filled]
  103 [label="State 103\n\l 47 relation: '(' condition ')' •\l"]
  103 -> "103R47" [style=solid]
 "103R47" [label="R47", fillcolor=3, shape=diamond, style=filled]
  104 [label="State 104\n\l 42 condition_list: condition_list ANDOP condition •\l"]
  104 -> "104R42" [style=solid]
 "104R42" [label="R42", fillcolor=3, shape=diamond, style=filled]
  105 [label="State 105\n\l 43 condition_list: condition_list OROP condition •\l"]
  105 -> "105R43" [style=solid]
 "105R43" [label="R43", fillcolor=3, shape=diamond, style=filled]
  106 [label="State 106\n\l 23 statement: WHEN condition_list ',' expression • ':' expression\l 50 expression: expression • ADDOP term\l"]
  106 -> 71 [style=solid label="ADDOP"]
  106 -> 116 [style=solid label="':'"]
  107 [label="State 107\n\l 48 relation: expression RELOP expression •\l 50 expression: expression • ADDOP term\l"]
  107 -> 71 [style=solid label="ADDOP"]
  107 -> "107R48" [style=solid]
 "107R48" [label="R48", fillcolor=3, shape=diamond, style=filled]
  108 [label="State 108\n\l 29 SWITCH_descent: SWITCH expression IS error • ENDSWITCH ';'\l"]
  108 -> 117 [style=solid label="ENDSWITCH"]
  109 [label="State 109\n\l 38 case: CASE • INT_LITERAL ARROW statement ';'\l 39     | CASE • error ';'\l"]
  109 -> 118 [style=dotted]
  109 -> 119 [style=solid label="INT_LITERAL"]
  110 [label="State 110\n\l 41 cases: case •\l"]
  110 -> "110R41" [style=solid]
 "110R41" [label="R41", fillcolor=3, shape=diamond, style=filled]
  111 [label="State 111\n\l 28 SWITCH_descent: SWITCH expression IS cases • OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l 40 cases: cases • case\l"]
  111 -> 109 [style=solid label="CASE"]
  111 -> 120 [style=solid label="OTHERS"]
  111 -> 121 [style=dashed label="case"]
  112 [label="State 112\n\l 30 IF_descent: IF condition_list THEN statement • ELSIF_descent ELSE statement ENDIF ';'\l"]
  112 -> 122 [style=solid label="ELSIF"]
  112 -> 123 [style=dashed label="ELSIF_descent"]
  112 -> "112R33" [style=solid]
 "112R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  113 [label="State 113\n\l 16 list: '(' • expressions ')'\l"]
  113 -> 29 [style=solid label="INT_LITERAL"]
  113 -> 30 [style=solid label="REAL_LITERAL"]
  113 -> 31 [style=solid label="HEX_LITERAL"]
  113 -> 32 [style=solid label="CHAR_LITERAL"]
  113 -> 33 [style=solid label="NEGOP"]
  113 -> 34 [style=solid label="IDENTIFIER"]
  113 -> 35 [style=solid label="NOTOP"]
  113 -> 40 [style=solid label="'('"]
  113 -> 124 [style=dashed label="expressions"]
  113 -> 125 [style=dashed label="expression"]
  113 -> 46 [style=dashed label="term"]
  113 -> 47 [style=dashed label="primary"]
  114 [label="State 114\n\l 27 statement: FOLD direction operator list • ENDFOLD\l"]
  114 -> 126 [style=solid label="ENDFOLD"]
  115 [label="State 115\n\l 15 variable: IDENTIFIER ':' LIST OF type IS list • ';'\l"]
  115 -> 127 [style=solid label="';'"]
  116 [label="State 116\n\l 23 statement: WHEN condition_list ',' expression ':' • expression\l"]
  116 -> 29 [style=solid label="INT_LITERAL"]
  116 -> 30 [style=solid label="REAL_LITERAL"]
  116 -> 31 [style=solid label="HEX_LITERAL"]
  116 -> 32 [style=solid label="CHAR_LITERAL"]
  116 -> 33 [style=solid label="NEGOP"]
  116 -> 34 [style=solid label="IDENTIFIER"]
  116 -> 35 [style=solid label="NOTOP"]
  116 -> 40 [style=solid label="'('"]
  116 -> 128 [style=dashed label="expression"]
  116 -> 46 [style=dashed label="term"]
  116 -> 47 [style=dashed label="primary"]
  117 [label="State 117\n\l 29 SWITCH_descent: SWITCH expression IS error ENDSWITCH • ';'\l"]
  117 -> 129 [style=solid label="';'"]
  118 [label="State 118\n\l 39 case: CASE error • ';'\l"]
  118 -> 130 [style=solid label="';'"]
  119 [label="State 119\n\l 38 case: CASE INT_LITERAL • ARROW statement ';'\l"]
  119 -> 131 [style=solid label="ARROW"]
  120 [label="State 120\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS • ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  120 -> 132 [style=solid label="ARROW"]
  121 [label="State 121\n\l 40 cases: cases case •\l"]
  121 -> "121R40" [style=solid]
 "121R40" [label="R40", fillcolor=3, shape=diamond, style=filled]
  122 [label="State 122\n\l 31 ELSIF_descent: ELSIF • condition_list THEN statement ELSIF_descent\l 32              | ELSIF • error ELSIF_descent\l"]
  122 -> 133 [style=dotted]
  122 -> 29 [style=solid label="INT_LITERAL"]
  122 -> 30 [style=solid label="REAL_LITERAL"]
  122 -> 31 [style=solid label="HEX_LITERAL"]
  122 -> 32 [style=solid label="CHAR_LITERAL"]
  122 -> 33 [style=solid label="NEGOP"]
  122 -> 34 [style=solid label="IDENTIFIER"]
  122 -> 58 [style=solid label="NOTOP"]
  122 -> 59 [style=solid label="'('"]
  122 -> 134 [style=dashed label="condition_list"]
  122 -> 61 [style=dashed label="condition"]
  122 -> 62 [style=dashed label="relation"]
  122 -> 63 [style=dashed label="expression"]
  122 -> 46 [style=dashed label="term"]
  122 -> 47 [style=dashed label="primary"]
  123 [label="State 123\n\l 30 IF_descent: IF condition_list THEN statement ELSIF_descent • ELSE statement ENDIF ';'\l"]
  123 -> 135 [style=solid label="ELSE"]
  124 [label="State 124\n\l 16 list: '(' expressions • ')'\l 17 expressions: expressions • ',' expression\l"]
  124 -> 136 [style=solid label="','"]
  124 -> 137 [style=solid label="')'"]
  125 [label="State 125\n\l 18 expressions: expression •\l 50 expression: expression • ADDOP term\l"]
  125 -> 71 [style=solid label="ADDOP"]
  125 -> "125R18" [style=solid]
 "125R18" [label="R18", fillcolor=3, shape=diamond, style=filled]
  126 [label="State 126\n\l 27 statement: FOLD direction operator list ENDFOLD •\l"]
  126 -> "126R27" [style=solid]
 "126R27" [label="R27", fillcolor=3, shape=diamond, style=filled]
  127 [label="State 127\n\l 15 variable: IDENTIFIER ':' LIST OF type IS list ';' •\l"]
  127 -> "127R15" [style=solid]
 "127R15" [label="R15", fillcolor=3, shape=diamond, style=filled]
  128 [label="State 128\n\l 23 statement: WHEN condition_list ',' expression ':' expression •\l 50 expression: expression • ADDOP term\l"]
  128 -> 71 [style=solid label="ADDOP"]
  128 -> "128R23" [style=solid]
 "128R23" [label="R23", fillcolor=3, shape=diamond, style=filled]
  129 [label="State 129\n\l 29 SWITCH_descent: SWITCH expression IS error ENDSWITCH ';' •\l"]
  129 -> "129R29" [style=solid]
 "129R29" [label="R29", fillcolor=3, shape=diamond, style=filled]
  130 [label="State 130\n\l 39 case: CASE error ';' •\l"]
  130 -> "130R39" [style=solid]
 "130R39" [label="R39", fillcolor=3, shape=diamond, style=filled]
  131 [label="State 131\n\l 38 case: CASE INT_LITERAL ARROW • statement ';'\l"]
  131 -> 29 [style=solid label="INT_LITERAL"]
  131 -> 30 [style=solid label="REAL_LITERAL"]
  131 -> 31 [style=solid label="HEX_LITERAL"]
  131 -> 32 [style=solid label="CHAR_LITERAL"]
  131 -> 33 [style=solid label="NEGOP"]
  131 -> 34 [style=solid label="IDENTIFIER"]
  131 -> 35 [style=solid label="NOTOP"]
  131 -> 36 [style=solid label="WHEN"]
  131 -> 37 [style=solid label="SWITCH"]
  131 -> 38 [style=solid label="IF"]
  131 -> 39 [style=solid label="FOLD"]
  131 -> 40 [style=solid label="'('"]
  131 -> 138 [style=dashed label="statement"]
  131 -> 43 [style=dashed label="SWITCH_descent"]
  131 -> 44 [style=dashed label="IF_descent"]
  131 -> 45 [style=dashed label="expression"]
  131 -> 46 [style=dashed label="term"]
  131 -> 47 [style=dashed label="primary"]
  132 [label="State 132\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW • statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  132 -> 29 [style=solid label="INT_LITERAL"]
  132 -> 30 [style=solid label="REAL_LITERAL"]
  132 -> 31 [style=solid label="HEX_LITERAL"]
  132 -> 32 [style=solid label="CHAR_LITERAL"]
  132 -> 33 [style=solid label="NEGOP"]
  132 -> 34 [style=solid label="IDENTIFIER"]
  132 -> 35 [style=solid label="NOTOP"]
  132 -> 36 [style=solid label="WHEN"]
  132 -> 37 [style=solid label="SWITCH"]
  132 -> 38 [style=solid label="IF"]
  132 -> 39 [style=solid label="FOLD"]
  132 -> 40 [style=solid label="'('"]
  132 -> 139 [style=dashed label="statement"]
  132 -> 43 [style=dashed label="SWITCH_descent"]
  132 -> 44 [style=dashed label="IF_descent"]
  132 -> 45 [style=dashed label="expression"]
  132 -> 46 [style=dashed label="term"]
  132 -> 47 [style=dashed label="primary"]
  133 [label="State 133\n\l 32 ELSIF_descent: ELSIF error • ELSIF_descent\l"]
  133 -> 122 [style=solid label="ELSIF"]
  133 -> 140 [style=dashed label="ELSIF_descent"]
  133 -> "133R33" [style=solid]
 "133R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  134 [label="State 134\n\l 31 ELSIF_descent: ELSIF condition_list • THEN statement ELSIF_descent\l 42 condition_list: condition_list • ANDOP condition\l 43               | condition_list • OROP condition\l"]
  134 -> 85 [style=solid label="ANDOP"]
  134 -> 86 [style=solid label="OROP"]
  134 -> 141 [style=solid label="THEN"]
  135 [label="State 135\n\l 30 IF_descent: IF condition_list THEN statement ELSIF_descent ELSE • statement ENDIF ';'\l"]
  135 -> 29 [style=solid label="INT_LITERAL"]
  135 -> 30 [style=solid label="REAL_LITERAL"]
  135 -> 31 [style=solid label="HEX_LITERAL"]
  135 -> 32 [style=solid label="CHAR_LITERAL"]
  135 -> 33 [style=solid label="NEGOP"]
  135 -> 34 [style=solid label="IDENTIFIER"]
  135 -> 35 [style=solid label="NOTOP"]
  135 -> 36 [style=solid label="WHEN"]
  135 -> 37 [style=solid label="SWITCH"]
  135 -> 38 [style=solid label="IF"]
  135 -> 39 [style=solid label="FOLD"]
  135 -> 40 [style=solid label="'('"]
  135 -> 142 [style=dashed label="statement"]
  135 -> 43 [style=dashed label="SWITCH_descent"]
  135 -> 44 [style=dashed label="IF_descent"]
  135 -> 45 [style=dashed label="expression"]
  135 -> 46 [style=dashed label="term"]
  135 -> 47 [style=dashed label="primary"]
  136 [label="State 136\n\l 17 expressions: expressions ',' • expression\l"]
  136 -> 29 [style=solid label="INT_LITERAL"]
  136 -> 30 [style=solid label="REAL_LITERAL"]
  136 -> 31 [style=solid label="HEX_LITERAL"]
  136 -> 32 [style=solid label="CHAR_LITERAL"]
  136 -> 33 [style=solid label="NEGOP"]
  136 -> 34 [style=solid label="IDENTIFIER"]
  136 -> 35 [style=solid label="NOTOP"]
  136 -> 40 [style=solid label="'('"]
  136 -> 143 [style=dashed label="expression"]
  136 -> 46 [style=dashed label="term"]
  136 -> 47 [style=dashed label="primary"]
  137 [label="State 137\n\l 16 list: '(' expressions ')' •\l"]
  137 -> "137R16" [style=solid]
 "137R16" [label="R16", fillcolor=3, shape=diamond, style=filled]
  138 [label="State 138\n\l 38 case: CASE INT_LITERAL ARROW statement • ';'\l"]
  138 -> 144 [style=solid label="';'"]
  139 [label="State 139\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement • ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  139 -> 145 [style=solid label="ENDSWITCH"]
  140 [label="State 140\n\l 32 ELSIF_descent: ELSIF error ELSIF_descent •\l"]
  140 -> "140R32" [style=solid]
 "140R32" [label="R32", fillcolor=3, shape=diamond, style=filled]
  141 [label="State 141\n\l 31 ELSIF_descent: ELSIF condition_list THEN • statement ELSIF_descent\l"]
  141 -> 29 [style=solid label="INT_LITERAL"]
  141 -> 30 [style=solid label="REAL_LITERAL"]
  141 -> 31 [style=solid label="HEX_LITERAL"]
  141 -> 32 [style=solid label="CHAR_LITERAL"]
  141 -> 33 [style=solid label="NEGOP"]
  141 -> 34 [style=solid label="IDENTIFIER"]
  141 -> 35 [style=solid label="NOTOP"]
  141 -> 36 [style=solid label="WHEN"]
  141 -> 37 [style=solid label="SWITCH"]
  141 -> 38 [style=solid label="IF"]
  141 -> 39 [style=solid label="FOLD"]
  141 -> 40 [style=solid label="'('"]
  141 -> 146 [style=dashed label="statement"]
  141 -> 43 [style=dashed label="SWITCH_descent"]
  141 -> 44 [style=dashed label="IF_descent"]
  141 -> 45 [style=dashed label="expression"]
  141 -> 46 [style=dashed label="term"]
  141 -> 47 [style=dashed label="primary"]
  142 [label="State 142\n\l 30 IF_descent: IF condition_list THEN statement ELSIF_descent ELSE statement • ENDIF ';'\l"]
  142 -> 147 [style=solid label="ENDIF"]
  143 [label="State 143\n\l 17 expressions: expressions ',' expression •\l 50 expression: expression • ADDOP term\l"]
  143 -> 71 [style=solid label="ADDOP"]
  143 -> "143R17" [style=solid]
 "143R17" [label="R17", fillcolor=3, shape=diamond, style=filled]
  144 [label="State 144\n\l 38 case: CASE INT_LITERAL ARROW statement ';' •\l"]
  144 -> "144R38" [style=solid]
 "144R38" [label="R38", fillcolor=3, shape=diamond, style=filled]
  145 [label="State 145\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH • ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  145 -> 148 [style=solid label="';'"]
  146 [label="State 146\n\l 31 ELSIF_descent: ELSIF condition_list THEN statement • ELSIF_descent\l"]
  146 -> 122 [style=solid label="ELSIF"]
  146 -> 149 [style=dashed label="ELSIF_descent"]
  146 -> "146R33" [style=solid]
 "146R33" [label="R33", fillcolor=3, shape=diamond, style=filled]
  147 [label="State 147\n\l 30 IF_descent: IF condition_list THEN statement ELSIF_descent ELSE statement ENDIF • ';'\l"]
  147 -> 150 [style=solid label="';'"]
  148 [label="State 148\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' • SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  148 -> 151 [style=solid label="SWITCH"]
  149 [label="State 149\n\l 31 ELSIF_descent: ELSIF condition_list THEN statement ELSIF_descent •\l"]
  149 -> "149R31" [style=solid]
 "149R31" [label="R31", fillcolor=3, shape=diamond, style=filled]
  150 [label="State 150\n\l 30 IF_descent: IF condition_list THEN statement ELSIF_descent ELSE statement ENDIF ';' •\l"]
  150 -> "150R30" [style=solid]
 "150R30" [label="R30", fillcolor=3, shape=diamond, style=filled]
  151 [label="State 151\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH • expression IS cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  151 -> 29 [style=solid label="INT_LITERAL"]
  151 -> 30 [style=solid label="REAL_LITERAL"]
  151 -> 31 [style=solid label="HEX_LITERAL"]
  151 -> 32 [style=solid label="CHAR_LITERAL"]
  151 -> 33 [style=solid label="NEGOP"]
  151 -> 34 [style=solid label="IDENTIFIER"]
  151 -> 35 [style=solid label="NOTOP"]
  151 -> 40 [style=solid label="'('"]
  151 -> 152 [style=dashed label="expression"]
  151 -> 46 [style=dashed label="term"]
  151 -> 47 [style=dashed label="primary"]
  152 [label="State 152\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression • IS cases OTHERS ARROW statement ';' ENDSWITCH\l 50 expression: expression • ADDOP term\l"]
  152 -> 71 [style=solid label="ADDOP"]
  152 -> 153 [style=solid label="IS"]
  153 [label="State 153\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS • cases OTHERS ARROW statement ';' ENDSWITCH\l"]
  153 -> 109 [style=solid label="CASE"]
  153 -> 110 [style=dashed label="case"]
  153 -> 154 [style=dashed label="cases"]
  154 [label="State 154\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases • OTHERS ARROW statement ';' ENDSWITCH\l 40 cases: cases • case\l"]
  154 -> 109 [style=solid label="CASE"]
  154 -> 155 [style=solid label="OTHERS"]
  154 -> 121 [style=dashed label="case"]
  155 [label="State 155\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS • ARROW statement ';' ENDSWITCH\l"]
  155 -> 156 [style=solid label="ARROW"]
  156 [label="State 156\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW • statement ';' ENDSWITCH\l"]
  156 -> 29 [style=solid label="INT_LITERAL"]
  156 -> 30 [style=solid label="REAL_LITERAL"]
  156 -> 31 [style=solid label="HEX_LITERAL"]
  156 -> 32 [style=solid label="CHAR_LITERAL"]
  156 -> 33 [style=solid label="NEGOP"]
  156 -> 34 [style=solid label="IDENTIFIER"]
  156 -> 35 [style=solid label="NOTOP"]
  156 -> 36 [style=solid label="WHEN"]
  156 -> 37 [style=solid label="SWITCH"]
  156 -> 38 [style=solid label="IF"]
  156 -> 39 [style=solid label="FOLD"]
  156 -> 40 [style=solid label="'('"]
  156 -> 157 [style=dashed label="statement"]
  156 -> 43 [style=dashed label="SWITCH_descent"]
  156 -> 44 [style=dashed label="IF_descent"]
  156 -> 45 [style=dashed label="expression"]
  156 -> 46 [style=dashed label="term"]
  156 -> 47 [style=dashed label="primary"]
  157 [label="State 157\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement • ';' ENDSWITCH\l"]
  157 -> 158 [style=solid label="';'"]
  158 [label="State 158\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' • ENDSWITCH\l"]
  158 -> 159 [style=solid label="ENDSWITCH"]
  159 [label="State 159\n\l 28 SWITCH_descent: SWITCH expression IS cases OTHERS ARROW statement ENDSWITCH ';' SWITCH expression IS cases OTHERS ARROW statement ';' ENDSWITCH •\l"]
  159 -> "159R28" [style=solid]
 "159R28" [label="R28", fillcolor=3, shape=diamond, style=filled]
}
